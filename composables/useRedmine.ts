import axios, { type AxiosInstance } from 'axios';
import type { RedmineConfig, RedmineIssue, RedmineResponse, VacationInfo } from '~/types/redmine';

export const useRedmine = () => {
  const config = useRuntimeConfig();
  
  const getRedmineConfig = (): RedmineConfig => {
    const redmineConfig: RedmineConfig = {
      url: config.public.redmineUrl as string || 'https://redmine.crypton.studio',
      projectId: config.public.redmineProjectId as string || 'vacation',
    };

    // –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç API –∫–ª—é—á—É
    if (config.redmineApiKey) {
      redmineConfig.apiKey = config.redmineApiKey as string;
    } else if (config.redmineUsername && config.redminePassword) {
      redmineConfig.username = config.redmineUsername as string;
      redmineConfig.password = config.redminePassword as string;
    }

    return redmineConfig;
  };

  const createClient = (config: RedmineConfig): AxiosInstance => {
    const client = axios.create({
      baseURL: config.url,
      headers: {
        'Content-Type': 'application/json',
      },
    });

    if (config.apiKey) {
      client.defaults.headers.common['X-Redmine-API-Key'] = config.apiKey;
    } else if (config.username && config.password) {
      client.defaults.auth = {
        username: config.username,
        password: config.password,
      };
    }

    return client;
  };

  const getVacationIssues = async (): Promise<RedmineIssue[]> => {
    const redmineConfig = getRedmineConfig();
    const client = createClient(redmineConfig);

    console.log(`üîß –î–µ–ª–∞–µ–º –∑–∞–ø—Ä–æ—Å –∫: ${redmineConfig.url}/projects/${redmineConfig.projectId}/issues.json`);
    console.log('üîß –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:', {
      hasApiKey: !!redmineConfig.apiKey,
      hasUsername: !!redmineConfig.username,
      hasPassword: !!redmineConfig.password,
    });

    try {
      const response = await client.get<RedmineResponse<RedmineIssue>>(
        `/projects/${redmineConfig.projectId}/issues.json`,
        {
          params: {
            limit: 100,
            status_id: '*', // –í—Å–µ —Å—Ç–∞—Ç—É—Å—ã
          },
        }
      );

      console.log(`‚úÖ –£—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç Redmine, —Å—Ç–∞—Ç—É—Å: ${response.status}`);
      console.log(`‚úÖ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–¥–∞—á –≤ –æ—Ç–≤–µ—Ç–µ: ${response.data.issues?.length || 0}`);
      
      return response.data.issues || [];
    } catch (error) {
      console.error('‚ùå –î–µ—Ç–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Redmine:', {
        message: error instanceof Error ? error.message : 'Unknown error',
        response: error && typeof error === 'object' && 'response' in error ? {
          status: (error as { response?: { status?: number } }).response?.status,
          statusText: (error as { response?: { statusText?: string } }).response?.statusText,
          data: (error as { response?: { data?: unknown } }).response?.data
        } : null
      });
      throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ–± –æ—Ç–ø—É—Å–∫–∞—Ö');
    }
  };

  const deduplicateVacations = (issues: RedmineIssue[]): RedmineIssue[] => {
    const groupedVacations = new Map<string, RedmineIssue[]>();
    
    issues.forEach(issue => {
      // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º —Ç–µ–∫—Å—Ç: —É–±–∏—Ä–∞–µ–º –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫ –∏ –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
      const normalizedSubject = issue.subject
        .replace(/\s+/g, ' ') // –ó–∞–º–µ–Ω—è–µ–º –ª—é–±—ã–µ –ø—Ä–æ–±–µ–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã (–≤–∫–ª—é—á–∞—è \n) –Ω–∞ –æ–¥–∏–Ω –ø—Ä–æ–±–µ–ª
        .trim(); // –£–±–∏—Ä–∞–µ–º –ø—Ä–æ–±–µ–ª—ã –≤ –Ω–∞—á–∞–ª–µ –∏ –∫–æ–Ω—Ü–µ
      
      if (!groupedVacations.has(normalizedSubject)) {
        groupedVacations.set(normalizedSubject, []);
      }
      groupedVacations.get(normalizedSubject)!.push(issue);
    });

    return Array.from(groupedVacations.values()).map(group => group[0]);
  };

  const mapIssueToVacationInfo = (issue: RedmineIssue): VacationInfo => {
    return {
      employeeName: issue.assigned_to?.name || issue.author?.name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ',
      startDate: issue.start_date || issue.created_on,
      endDate: issue.due_date,
      status: issue.status.name,
      description: issue.subject,
    };
  };

  const getVacations = async (): Promise<VacationInfo[]> => {
    try {
      console.log('üîß –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –¥–∞–Ω–Ω—ã—Ö –∏–∑ Redmine...');
      console.log('üîß Runtime config:', {
        redmineUrl: config.public.redmineUrl,
        projectId: config.public.redmineProjectId,
        hasApiKey: !!config.redmineApiKey,
        hasUsername: !!config.redmineUsername,
        hasPassword: !!config.redminePassword,
      });
      
      // –î–µ–ª–∞–µ–º –ø—Ä—è–º–æ–π –∑–∞–ø—Ä–æ—Å –∫ Redmine API
      const issues = await getVacationIssues();
      console.log(`‚úÖ –ü–æ–ª—É—á–µ–Ω–æ ${issues.length} –∑–∞–¥–∞—á –∏–∑ Redmine`);
      
      const vacations = deduplicateVacations(issues).map(issue => mapIssueToVacationInfo(issue));
      console.log(`‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ ${vacations.length} –æ—Ç–ø—É—Å–∫–æ–≤ –ø–æ—Å–ª–µ –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏–∏`);
      
      return vacations;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö:', error);
      
      // –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ CORS, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤ –≤–º–µ—Å—Ç–æ –æ—à–∏–±–∫–∏
      if (error instanceof Error && error.message.includes('CORS')) {
        console.log('‚ö†Ô∏è CORS –æ—à–∏–±–∫–∞ - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤');
        return [];
      }
      
      throw error;
    }
  };

  const getActiveVacations = async (): Promise<VacationInfo[]> => {
    const vacations = await getVacations();
    const now = new Date();
    
    return vacations.filter(vacation => {
      if (!vacation.startDate) return false;
      
      const startDate = new Date(vacation.startDate);
      const endDate = vacation.endDate ? new Date(vacation.endDate) : null;
      
      // –ê–∫—Ç–∏–≤–Ω—ã–µ –æ—Ç–ø—É—Å–∫–∞: –Ω–∞—á–∞–ª–∏—Å—å, –Ω–æ –µ—â–µ –Ω–µ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å
      return startDate <= now && (!endDate || endDate >= now);
    });
  };

  const getUpcomingVacations = async (): Promise<VacationInfo[]> => {
    const vacations = await getVacations();
    const now = new Date();
    
    return vacations.filter(vacation => {
      if (!vacation.startDate) return false;
      
      const startDate = new Date(vacation.startDate);
      
      // –ü—Ä–µ–¥—Å—Ç–æ—è—â–∏–µ –æ—Ç–ø—É—Å–∫–∞: –µ—â–µ –Ω–µ –Ω–∞—á–∞–ª–∏—Å—å
      return startDate > now;
    });
  };

  const formatDate = (dateString: string): string => {
    const date = new Date(dateString);
    return date.toLocaleDateString('ru-RU', {
      year: 'numeric',
      month: 'long',
      day: 'numeric',
    });
  };

  return {
    getVacations,
    getActiveVacations,
    getUpcomingVacations,
    formatDate
  };
}; 